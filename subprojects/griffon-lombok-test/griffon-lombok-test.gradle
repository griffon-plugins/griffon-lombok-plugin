apply plugin: 'java'
apply plugin: 'groovy'

apply from: rootProject.file('gradle/javafx.gradle')

configurations {
    ecj
}

sourceSets {
    ecj {
        java.srcDirs = ['src/main/java']
        compileClasspath += (configurations.compile + configurations.compileOnly)
    }
}

dependencies {
    ecj "org.eclipse.jdt.core.compiler:ecj:3.7.1"
    compileOnly project(':griffon-core-lombok-compile')
    compile "org.codehaus.griffon:griffon-core-compile:${rootProject.griffonVersion}"
}

compileEcjJava {
    options.encoding = 'utf-8'
    options.fork = true
    doFirst {
        options.forkOptions.with {
            executable = 'java'
            jvmArgs = [ '-cp', sourceSets.ecj.compileClasspath.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main' ]
        }
    }
}

task testEcj(type: Test) {
    classpath = configurations.runtime + configurations.testRuntime + sourceSets.ecj.output + sourceSets.test.output
    reports {
        html.destination = file("$buildDir/reports/testEcj")
        junitXml.destination = file("$buildDir/test-results/ecj")
    }
}

tasks.check.dependsOn testEcj

task delombok {
    def srcJava = "src/main/java"
    def srcDelomboked = "$buildDir/generated-src/main/delombok"
    inputs.files sourceSets.main.allJava
    inputs.files sourceSets.main.output
    outputs.dir file(srcDelomboked)

    doLast {
        ant.taskdef(name: 'delombok', classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compileOnly.asPath)
        ant.delombok(from: srcJava, to: srcDelomboked, classpath: configurations.compile + sourceSets.main.output)
    }
}

tasks.test.dependsOn delombok
