apply plugin: 'java'

apply from: rootProject.file('gradle/code-coverage.gradle')

// begin workaround for https://github.com/rzwitserloot/lombok/issues/1005
// we cannot just define a dependency on lombok, instead we must unpack the jar,
// rename all .SCL.lombok files to .class and include these files together with our
// handlers

// first create a new configuration for the lombok.jar
configurations {
    lombok
}


// unpack the files, rename the class files
def unpackedAndRenamedLombokDir = file("$buildDir/lombok")

task unpackAndRenameLombok {
    inputs.files configurations.lombok
    outputs.dir unpackedAndRenamedLombokDir
    doFirst {
        mkdir unpackedAndRenamedLombokDir
        delete unpackedAndRenamedLombokDir.listFiles()
    }
    doLast {
        copy {
            from zipTree(configurations.lombok.singleFile)
            into unpackedAndRenamedLombokDir
            rename "(.*)[.]SCL[.]lombok", '$1.class'
        }
    }
}

// we have to merge the serviceloader files from lombok with our own files
def filesToMerge = [
        "META-INF/services/lombok.eclipse.EclipseAnnotationHandler",
        "META-INF/services/lombok.javac.JavacAnnotationHandler"
]

tasks.processResources {
    dependsOn unpackAndRenameLombok
    from(unpackedAndRenamedLombokDir) {
        filesToMerge.each { exclude it }
    }
}
tasks.compileJava {
    dependsOn unpackAndRenameLombok
    doLast {
        filesToMerge.each {
            new File(destinationDir, it).text += new File(unpackedAndRenamedLombokDir, it).text
        }
    }
}

dependencies {
    compile("org.codehaus.griffon:griffon-core-compile:${rootProject.griffonVersion}") {
        transitive = false
    }
    compile files("${System.properties['java.home']}/../lib/tools.jar")
    compile "org.eclipse.jdt:org.eclipse.jdt.core:3.10.0"
    compile 'javax.inject:javax.inject:1'
    lombok 'org.projectlombok:lombok:1.16.6'

    compileOnly files(unpackedAndRenamedLombokDir)
}
